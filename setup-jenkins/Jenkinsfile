pipeline {
    agent any
    options {
        timeout(time:30, unit: 'MINUTES')
    }
    stages {
        stage('Checkout repository') {
            steps {
                echo "Entering 'Checkout repository' stage"
                checkout scm
                echo "Completed 'Checkout repository' stage"
            }
        }
        stage('Check Current Directory') {
            steps {
                sh "ls -la"
            }
        }

        stage('OWASP Dependency-Check Vulnerabilities') {
            steps {
                dependencyCheck additionalArguments: ''' 
                            -o './'
                            -s './setup-jenkins'
                            -f 'ALL' 
                            --prettyPrint''', odcInstallation: 'OWASP Dependency-Check Vulnerabilities'
                
                dependencyCheckPublisher pattern: 'dependency-check-report.xml'
            }
        }

        stage('Code Quality Check via SonarQube') {
            steps {
                script {
                    def scannerHome = tool 'SonarQube';
                        withSonarQubeEnv('SonarQube') {
                            sh "sonar-scanner \
                            -Dsonar.projectKey=OWASP \
                            -Dsonar.sources=. \
                            -Dsonar.host.url=http://localhost:9000 \
                            -Dsonar.token=sqp_396c1e5ef4502deef8beebf5ccab9963f14b1361"
                        }
                }    
            }
        }

        stage('Build, start docker and kill images'){
            steps {
                sh "dockerd &"
                sh "docker --version"
                sh "docker --version"
                sh "docker-compose -f setup-jenkins/docker-compose.yml down"
                sh "docker-compose -f setup-jenkins/docker-compose.yml build"
                sh "docker-compose -f setup-jenkins/docker-compose.yml up -d"
                sh "docker ps"
                sh "docker-compose -f setup-jenkins/docker-compose.yml down"
            }
        }
    } 
    post {
        always {
            recordIssues enabledForFailure: true, tool:sonarQube()
        }
    }
}


